// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]

  members        Member[]
  invitations    Invitation[]
  ProjectWatcher ProjectWatcher[]
  TaskWatcher    TaskWatcher[]
  Comment        Comment[]
  Activity       Activity[]
  Notification   Notification[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  activeOrganizationId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Organization {
  id   String  @id @default(uuid())
  name String
  // slug String?
  logo String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members     Member[]
  invitations Invitation[]
  spaces      Space[]

  @@map("organization")
}

enum MemberRole {
  ADMIN
  MEMBER
}

model Member {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  role      MemberRole @default(MEMBER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  Task        Task[]
  SpaceMember SpaceMember[]

  @@map("member")
}

model Invitation {
  id             String       @id @default(uuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Space {
  id             String @id @default(uuid())
  name           String
  organizationId String

  //TODO: add default icon and color
  icon  String? // e.g. emoji ðŸš€ or image URL 
  color String?

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Project     Project[]
  SpaceMember SpaceMember[]
}

model SpaceMember {
  id      String @id @default(uuid())
  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])

  memberId String
  member   Member @relation(fields: [memberId], references: [id])

  role MemberRole @default(MEMBER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([spaceId, memberId])
}

model Project {
  id   String @id @default(uuid())
  name String

  icon  String? // e.g. emoji ðŸ“‚ or small icon URL
  image String? // optional cover/banner image URL
  color String?

  spaceId        String
  space          Space            @relation(fields: [spaceId], references: [id])
  ProjectWatcher ProjectWatcher[]
  Task           Task[]
}

model ProjectWatcher {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([projectId, userId]) // user can't watch same project twice
  @@index([userId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  BLOCKED
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  dueDate     DateTime?
  position    Int
  priority    TaskPriority @default(LOW)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  assigneeId String
  assignee   Member @relation(fields: [assigneeId], references: [id], onDelete: Cascade)

  // for sub-task
  parentId String?
  parent   Task?   @relation("Subtasks", fields: [parentId], references: [id])
  subtasks Task[]  @relation("Subtasks")

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TaskWatcher TaskWatcher[]
  Attachment  Attachment[]
  TaskTag     TaskTag[]
  Comment     Comment[]
  Activity    Activity[]
}

model TaskWatcher {
  id     String @id @default(uuid())
  taskId String
  task   Task   @relation(fields: [taskId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@unique([taskId, userId]) // user can't watch same task twice
  @@index([userId])
}

model Attachment {
  id     String  @id @default(uuid())
  url    String // file URL
  type   String? // image, doc, pdf etc.
  taskId String
  task   Task    @relation(fields: [taskId], references: [id])

  createdAt DateTime   @default(now())
  Activity  Activity[]
}

model Tag {
  id    String  @id @default(uuid())
  name  String
  color String?

  tasks TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String
  task   Task   @relation(fields: [taskId], references: [id])
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([taskId, tagId])
}

model Comment {
  id       String @id @default(uuid())
  content  String
  taskId   String
  task     Task   @relation(fields: [taskId], references: [id])
  authorId String
  author   User   @relation(fields: [authorId], references: [id]) // assumes you have a User model

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Activity  Activity[]
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_ASSIGNED
  TASK_COMPLETED
  TASK_REOPENED
  TASK_DELETED

  COMMENT_ADDED
  COMMENT_UPDATED
  COMMENT_DELETED

  ATTACHMENT_ADDED
  ATTACHMENT_REMOVED

  STATUS_CHANGED
  DUE_DATE_CHANGED
}

model Activity {
  id      String       @id @default(uuid())
  type    ActivityType
  actorId String
  actor   User         @relation(fields: [actorId], references: [id])

  taskId String?
  task   Task?   @relation(fields: [taskId], references: [id])

  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])

  attachmentId String?
  attachment   Attachment? @relation(fields: [attachmentId], references: [id])

  createdAt    DateTime       @default(now())
  Notification Notification[]
}

model Notification {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  activityId String
  activity   Activity @relation(fields: [activityId], references: [id])

  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
